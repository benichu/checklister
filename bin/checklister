#!/usr/bin/env ruby
require "gli"
require "checklister"

include GLI::App

ISSUE_SERVICES = { "1" => "gitlab", "2" => "github" }.freeze

program_desc "gives you the power to transform any markdown file or url checklist into an actionable gitlab and github issue."

version Checklister::VERSION
subcommand_option_handling :normal
arguments :strict
sort_help :manually

# Flags
flag [:c,:config], default_value: File.join(ENV["HOME"],".checklister.yml"),
                   desc: "Set the saved configuration path"

flag [:s,:service], must_match: ISSUE_SERVICES.values
flag [:e,:endpoint], desc: "Set the issue service API endpoint"
flag [:p,:private_token], desc: "Set your private token to access the issue API service"

pre do |global_options,command,options,args|
  unless command.name.to_s == "setup"
    config_file = Checklister::ConfigurationFile.new(global_options["config"])
    if global_options[:endpoint]
      config_options = global_options
    elsif config_file.exist?
      saved_services = config_file.services
      if saved_services.size > 1
        puts "* Which Issue Service would you like to use?"
        saved_services.each_with_index do |service, index|
          line = []
          line << "[#{index+1}] #{service[:endpoint]}"
          line << "(#{service[:label]})" if service[:label]
          puts line.join(" ")
        end
        choice = STDIN.gets.to_i
        raise("You need to select a service.") if choice < 1
      else
        choice = 1
      end
      service_selected = saved_services[choice-1]
      config_options = service_selected
    else
      config_options = {}
    end
    Checklister.configure(config_options)
  else
    true
  end
end

desc "Show current configuration settings"
command :settings do |c|
  c.action do |global_options,options,args|
    puts "---------------------"
    Checklister.config.to_stdout
    puts "---------------------"
  end
end

desc "Save your gitlab or github settings for later"
command :setup do |c|
  c.action do |global_options,options,args|
    data = {}
    config_file = Checklister::ConfigurationFile.new(global_options["config"])

    if global_options[:service]
      service_selected = global_options[:service]
    else
      puts "* Which Issue Service would you like to setup?"
      ISSUE_SERVICES.each do |index, service|
        puts "[#{index}] #{service}"
      end
      choice = STDIN.gets.to_i
      raise("You need to select a service.") if choice < 1
      service_selected = ISSUE_SERVICES[choice.to_s]
    end
    data["kind"] = service_selected

    puts ""
    puts "* We are going to help you set up the #{service_selected} service"

    if service_selected == "gitlab"
      puts ""
      puts "** What is your gitlab endpoint? (Ex: https://gitlab.com/api/v3)"
      choice = STDIN.gets.chomp
      raise("You need to type a endpoint.") if choice == ""
      data["endpoint"] = choice
    elsif service_selected == "github"
      data["endpoint"] = "https://api.github.com"
    end

    puts ""
    puts "** What is your private token with the #{service_selected} service?"
    choice = STDIN.gets.chomp
    raise("You need to type a private token.") if choice == ""
    data["private_token"] = choice

    puts ""
    puts "** You can give a label to #{data["endpoint"]} (you can leave it blank too)"
    choice = STDIN.gets.chomp
    if choice != ""
      data["label"] = choice
    end

    config_file.add_service data
    config_file.persist
    puts ""
    puts "* Your configuration data has been saved at #{global_options[:config]}"
  end
end

desc "Transform a markdown file or url checklist into an actionable issue"
command :new do |c|
  c.flag [:c,:checklist], desc: "Set the markdown checklist file path", required: true
  c.action do |global_options,options,args|
    api_client = Checklister::Client.new(Checklister.config.to_hash)
    project_client = api_client.project
    checklist_path = options[:checklist]

    puts "* Type some letters of your project's name..."
    project_like = STDIN.gets.chomp
    projects = project_client.filtered_by_name(project_like)
    default_project_id = projects.first[:id]
    projects.each do |project|
      puts "%-5s %-100s" % ["[#{project[:id]}]", project[:name]]
    end
    puts "* Pick your project Id, defaults to [#{default_project_id}]"
    choice = STDIN.gets.chomp
    project_id = choice == "" ? default_project_id : choice
    project = project_client.get(project_id)
    puts "* Creating a checklist issue from #{checklist_path}"
    puts "  to the project: #{project[:name]}"
    parsed_checklist = Checklister::Parser.new(checklist_path)
    issue = api_client.issue.create(project_id, parsed_checklist.to_params)
    puts "* Issue successfully created!"
  end
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
